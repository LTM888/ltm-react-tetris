{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resePlayer) => {\n  const [stage, setStage] = useState(createStage());\n  TETROMINOSuseEffect(() => {\n    const updateStage = prevStage => {\n      // First clean stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // Then draw the new tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player.collided, player.pos.x, player.pos.y, player.tetromino]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/leighmartin/Desktop/react-tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resePlayer","stage","setStage","TETROMINOSuseEffect","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"mappings":"AAAA,SAASA,QAAT,EAAoBC,SAApB,QAAqC,OAArC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,UAAT,KAAwB;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAqBP,QAAQ,CAACE,WAAW,EAAZ,CAAnC;AAEAM,EAAAA,mBAAmB,CAAC,MAAM;AACtB,UAAMC,WAAW,GAAGC,SAAS,IAAI;AAC7B;AACA,YAAMC,QAAQ,GAAED,SAAS,CAACE,GAAV,CAAcC,GAAG,IAC7BA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADY,CAAhB,CAF6B,CAM7B;;AACAV,MAAAA,MAAM,CAACW,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACjCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACbP,YAAAA,QAAQ,CAACM,CAAC,GAAGb,MAAM,CAACgB,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGf,MAAM,CAACgB,GAAP,CAAWD,CAA1C,IAA+C,CAC3CD,KAD2C,EAE1C,GAAEd,MAAM,CAACiB,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFG,CAA/C;AAIH;AACJ,SAPD;AAQH,OATD;AAWA,aAAOV,QAAP;AAEH,KApBD;;AAqBAJ,IAAAA,QAAQ,CAACe,IAAI,IAAIb,WAAW,CAACa,IAAD,CAApB,CAAR;AACH,GAvBkB,EAuBhB,CAAClB,MAAM,CAACiB,QAAR,EAAkBjB,MAAM,CAACgB,GAAP,CAAWD,CAA7B,EAAgCf,MAAM,CAACgB,GAAP,CAAWH,CAA3C,EAA8Cb,MAAM,CAACW,SAArD,CAvBgB,CAAnB;AAyBA,SAAO,CAACT,KAAD,EAAQC,QAAR,CAAP;AACH,CA7BM","sourcesContent":["import { useState , useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resePlayer) => {\n    const [stage, setStage ] = useState(createStage());\n\n    TETROMINOSuseEffect(() => {\n        const updateStage = prevStage => {\n            // First clean stage\n            const newStage= prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n                );\n\n            // Then draw the new tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ];\n                    }\n                });\n            });\n\n            return newStage;\n\n        };\n        setStage(prev => updateStage(prev));\n    }, [player.collided, player.pos.x, player.pos.y, player.tetromino]);\n\n    return [stage, setStage];\n};"]},"metadata":{},"sourceType":"module"}