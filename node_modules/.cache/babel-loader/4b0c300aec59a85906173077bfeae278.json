{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage, resetPlayer } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsClered, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].lenght).fill([0, 'clear']));\n        return ack;\n      }\n\n      ack.push(row);\n      return ack;\n    });\n\n    const updateStage = prevStage => {\n      // First clean stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // Then draw the new tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); // Then check to is if we collided\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player.collided, player.pos.x, player.pos.y, player.tetromino]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/leighmartin/Desktop/react-tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","resetPlayer","useStage","player","stage","setStage","rowsClered","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","lenght","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":"AAAA,SAASA,QAAT,EAAoBC,SAApB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAuBC,WAAvB,QAAyC,gBAAzC;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASF,WAAT,KAAyB;AAC7C,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAqBP,QAAQ,CAACE,WAAW,EAAZ,CAAnC;AACA,QAAM,CAACM,UAAD,EAAaC,cAAb,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEA,UAAMC,SAAS,GAAGC,QAAQ,IACtBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC1B,UAAIA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAW,CAAjC,MAAwC,CAAC,CAA7C,EAAgD;AAC5CP,QAAAA,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAd;AACAJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CAAZ;AACA,eAAOR,GAAP;AACH;;AACDA,MAAAA,GAAG,CAACS,IAAJ,CAASR,GAAT;AACA,aAAOD,GAAP;AACH,KARD,CADJ;;AAWA,UAAMU,WAAW,GAAGC,SAAS,IAAI;AAC7B;AACA,YAAMb,QAAQ,GAAEa,SAAS,CAACC,GAAV,CAAcX,GAAG,IAC7BA,GAAG,CAACW,GAAJ,CAAQT,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADY,CAAhB,CAF6B,CAO7B;;AACAX,MAAAA,MAAM,CAACqB,SAAP,CAAiBC,OAAjB,CAAyB,CAACb,GAAD,EAAMc,CAAN,KAAY;AACjCd,QAAAA,GAAG,CAACa,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACblB,YAAAA,QAAQ,CAACiB,CAAC,GAAGvB,MAAM,CAAC0B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGzB,MAAM,CAAC0B,GAAP,CAAWD,CAA1C,IAA+C,CAC3CD,KAD2C,EAE1C,GAAExB,MAAM,CAAC2B,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFG,CAA/C;AAIH;AACJ,SAPD;AAQH,OATD,EAR6B,CAkB7B;;AACA,UAAI3B,MAAM,CAAC2B,QAAX,EAAqB;AACjB7B,QAAAA,WAAW;AACd;;AAED,aAAOQ,QAAP;AAEH,KAzBD;;AA0BAJ,IAAAA,QAAQ,CAACU,IAAI,IAAIM,WAAW,CAACN,IAAD,CAApB,CAAR;AACH,GAzCQ,EAyCN,CAACZ,MAAM,CAAC2B,QAAR,EAAkB3B,MAAM,CAAC0B,GAAP,CAAWD,CAA7B,EAAgCzB,MAAM,CAAC0B,GAAP,CAAWH,CAA3C,EAA8CvB,MAAM,CAACqB,SAArD,CAzCM,CAAT;AA2CA,SAAO,CAACpB,KAAD,EAAQC,QAAR,CAAP;AACH,CAhDM","sourcesContent":["import { useState , useEffect } from 'react';\nimport { createStage , resetPlayer} from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage ] = useState(createStage());\n    const [rowsClered, setRowsCleared ] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage =>\n            newStage.reduce((ack, row) => {\n                if (row.findIndex(cell => cell[0] ===0) === -1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].lenght).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            })\n\n        const updateStage = prevStage => {\n            // First clean stage\n            const newStage= prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n                );\n\n\n            // Then draw the new tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ];\n                    }\n                });\n            });\n            // Then check to is if we collided\n            if (player.collided) {\n                resetPlayer();\n            }\n\n            return newStage;\n\n        };\n        setStage(prev => updateStage(prev));\n    }, [player.collided, player.pos.x, player.pos.y, player.tetromino]);\n\n    return [stage, setStage];\n};"]},"metadata":{},"sourceType":"module"}