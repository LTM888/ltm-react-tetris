{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    // Make the rows to become cols (transpose)\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); // Reverse each row to get a rotated matrix\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      rotate(clonedPlayer.tetromino, -dir);\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["/Users/leighmartin/Desktop/react-tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","updatePlayerPos","prev","resetPlayer"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,gBAA5C;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAuBR,QAAQ,CAAC;AAClCS,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD6B;AAElCC,IAAAA,SAAS,EAAEV,UAAU,CAAC,CAAD,CAAV,CAAcW,KAFS;AAGlCC,IAAAA,QAAQ,EAAE;AAHwB,GAAD,CAArC;;AAMA,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC5B;AACA,UAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAC5BL,MAAM,CAACG,GAAP,CAAWG,GAAG,IAAIA,GAAG,CAACD,KAAD,CAArB,CADiB,CAArB,CAF4B,CAK5B;;AACA,QAAIJ,GAAG,GAAG,CAAV,EAAa,OAAOC,YAAY,CAACC,GAAb,CAAiBI,GAAG,IAAIA,GAAG,CAACC,OAAJ,EAAxB,CAAP;AACb,WAAON,YAAY,CAACM,OAAb,EAAP;AACH,GARD;;AAUA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQT,GAAR,KAAgB;AACjC,UAAMU,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAevB,MAAf,CAAX,CAArB;AACAoB,IAAAA,YAAY,CAACf,SAAb,GAAyBG,MAAM,CAACY,YAAY,CAACf,SAAd,EAAwBK,GAAxB,CAA/B;AAEA,UAAMR,GAAG,GAAGkB,YAAY,CAAClB,GAAb,CAAiBC,CAA7B;AACA,QAAIqB,MAAM,GAAG,CAAb;;AACA,WAAM1B,cAAc,CAACsB,YAAD,EAAcD,KAAd,EAAqB;AAAChB,MAAAA,CAAC,EAAC,CAAH;AAAMC,MAAAA,CAAC,EAAC;AAAR,KAArB,CAApB,EAAuD;AACnDI,MAAAA,MAAM,CAACY,YAAY,CAACf,SAAd,EAAyB,CAACK,GAA1B,CAAN;AACH;;AACDT,IAAAA,SAAS,CAACmB,YAAD,CAAT;AAEH,GAXD;;AAaA,QAAMK,eAAe,GAAG,CAAC;AAAEtB,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC5CN,IAAAA,SAAS,CAACyB,IAAI,KAAK,EACf,GAAGA,IADY;AAEfxB,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGuB,IAAI,CAACxB,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGsB,IAAI,CAACxB,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFU;AAGfG,MAAAA;AAHe,KAAL,CAAL,CAAT;AAKH,GAND;;AAQA,QAAMoB,WAAW,GAAGjC,WAAW,CAAE,MAAM;AAC/BO,IAAAA,SAAS,CAAC;AACNC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAACN,WAAW,GAAG,CAAd,GAAkB,CAAtB;AAAyBO,QAAAA,CAAC,EAAE;AAA5B,OADC;AAENC,MAAAA,SAAS,EAAET,eAAe,GAAGU,KAFvB;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KAAD,CAAT;AAKH,GAN0B,EAMxB,EANwB,CAA/B;AAQA,SAAO,CAACP,MAAD,EAASyB,eAAT,EAA0BE,WAA1B,EAAuCT,YAAvC,CAAP;AACH,CA/CM","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n    const [player, setPlayer ] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // Make the rows to become cols (transpose)\n        const rotatedTetro = matrix.map((_, index) =>\n            matrix.map(col => col[index]),\n            );\n        // Reverse each row to get a rotated matrix\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();\n    };\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino,dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer,stage, {x:0, y:0 })) {\n            rotate(clonedPlayer.tetromino, -dir);\n        }\n        setPlayer(clonedPlayer);\n\n    }\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback( () => {\n            setPlayer({\n                pos: { x:STAGE_WIDTH / 2 - 2, y: 0},\n                tetromino: randomTetromino().shape,\n                collided: false,\n            })\n        }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}"]},"metadata":{},"sourceType":"module"}