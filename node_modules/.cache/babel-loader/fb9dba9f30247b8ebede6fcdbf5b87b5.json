{"ast":null,"code":"import { useState } from 'react';\nimport { randomTetromino } from '../tetrominos';\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: randomTetromino().shape,\n    collided: false\n  });\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({});\n  }, []);\n  return [player];\n};","map":{"version":3,"sources":["/Users/leighmartin/Desktop/react-tetris/src/hooks/usePlayer.js"],"names":["useState","randomTetromino","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","updatePlayerPos","prev","resetPlayer","useCallback"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,eAAT,QAAgC,eAAhC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAuBJ,QAAQ,CAAC;AAClCK,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD6B;AAElCC,IAAAA,SAAS,EAAEP,eAAe,GAAGQ,KAFK;AAGlCC,IAAAA,QAAQ,EAAE;AAHwB,GAAD,CAArC;;AAMA,QAAMC,eAAe,GAAG,CAAC;AAAEL,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC5CN,IAAAA,SAAS,CAACQ,IAAI,KAAK,EACf,GAAGA,IADY;AAEfP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGM,IAAI,CAACP,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGK,IAAI,CAACP,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFU;AAGfG,MAAAA;AAHe,KAAL,CAAL,CAAT;AAKH,GAND;;AAQA,QAAMG,WAAW,GAAGC,WAAW,CAC3B,MAAM;AACFV,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH,GAH0B,EAI3B,EAJ2B,CAA/B;AAOA,SAAO,CAACD,MAAD,CAAP;AACH,CAvBM","sourcesContent":["import { useState } from 'react';\n\nimport { randomTetromino } from '../tetrominos';\n\nexport const usePlayer = () => {\n    const [player, setPlayer ] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: randomTetromino().shape,\n        collided: false,\n    });\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(\n        () => {\n            setPlayer({})\n        },\n        [],\n    )\n\n    return [player];\n}"]},"metadata":{},"sourceType":"module"}