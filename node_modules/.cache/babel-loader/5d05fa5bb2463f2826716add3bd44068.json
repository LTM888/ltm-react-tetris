{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n  const linePoints = [40, 100, 300, 1200];\n  const calcScore = useCallback(() => {\n    // We have score\n    if (rowsCleared > 0) {\n      // This is how original Teris score is calaulted\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n  return [score, setScore, rows, setRows, level, setLevel];\n};","map":{"version":3,"sources":["/Users/leighmartin/Desktop/react-tetris/src/hooks/useGameStatus.js"],"names":["useState","useEffect","useCallback","useGameStatus","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAO,MAAMC,aAAa,GAAGC,WAAW,IAAI;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAqBN,QAAQ,CAAC,CAAD,CAAnC;AACA,QAAM,CAAEO,IAAF,EAAQC,OAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAAES,KAAF,EAASC,QAAT,IAAsBV,QAAQ,CAAC,CAAD,CAApC;AAEA,QAAMW,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAnB;AAGA,QAAMC,SAAS,GAAGV,WAAW,CAAE,MAAM;AACjC;AACA,QAAIE,WAAW,GAAG,CAAlB,EAAqB;AACjB;AACAE,MAAAA,QAAQ,CAACO,IAAI,IAAIA,IAAI,GAAGF,UAAU,CAACP,WAAW,GAAG,CAAf,CAAV,IAA+BK,KAAK,GAAG,CAAvC,CAAhB,CAAR;AACAD,MAAAA,OAAO,CAACK,IAAI,IAAIA,IAAI,GAAGT,WAAhB,CAAP;AACH;AACJ,GAP4B,EAO1B,CAACK,KAAD,EAAQE,UAAR,EAAoBP,WAApB,CAP0B,CAA7B;AASAH,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACA,SAAD,EAAYR,WAAZ,EAAyBC,KAAzB,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AACH,CAtBM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore ] = useState(0);\n    const [ rows, setRows ] = useState(0);\n    const [ level, setLevel ] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n\n\n    const calcScore = useCallback( () => {\n        // We have score\n        if (rowsCleared > 0) {\n            // This is how original Teris score is calaulted\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setRows, level, setLevel];\n};\n  "]},"metadata":{},"sourceType":"module"}